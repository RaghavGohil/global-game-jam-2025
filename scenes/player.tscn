[gd_scene load_steps=16 format=3 uid="uid://dbu7luo43fneh"]

[ext_resource type="Texture2D" uid="uid://3inttbb8i4sm" path="res://sprites/gun.png" id="1_eo11n"]
[ext_resource type="Script" path="res://scripts/gun.gd" id="2_skjeg"]
[ext_resource type="PackedScene" uid="uid://yawp6h0c6mki" path="res://scenes/bubble.tscn" id="3_i7jmg"]
[ext_resource type="Texture2D" uid="uid://bl01yys0l5346" path="res://sprites/player_1.png" id="3_jae7b"]
[ext_resource type="Texture2D" uid="uid://dbeugq1v7638g" path="res://sprites/player_2.png" id="4_ba7lx"]
[ext_resource type="Texture2D" uid="uid://dehenhrtgxqaq" path="res://sprites/bubble.png" id="4_n7ypu"]

[sub_resource type="GDScript" id="GDScript_beeb3"]
script/source = "extends CharacterBody2D

@export var game_manager:Node2D

const SPEED = 50.0
const JUMP_VELOCITY = -170.0
var org_gravity = 500
var gravity:int
var facing_right = true  
var inside_bubble = false  
var bubbles_inside = {}  # Dictionary to track multiple bubbles
var bubble_last_position = Vector2.ZERO  # Store last bubble position
var bubble_velocity = Vector2.ZERO  # Store calculated bubble velocity

func _ready():
	gravity = org_gravity

func flip_player():
	var mouse_pos = get_global_mouse_position()
	var player_pos = global_position
	if mouse_pos.x < player_pos.x:
		$Sprite2D.flip_h = true  
	else:
		$Sprite2D.flip_h = false  

func move_player(delta):
	# Inside any bubble
	if inside_bubble and bubbles_inside.size() > 0:
		# Pick the latest bubble in the list (or you can implement your own choice logic)
		var current_bubble = bubbles_inside.keys()[0]

		# Calculate bubble velocity based on movement
		bubble_velocity = (current_bubble.global_position - bubble_last_position) / delta
		bubble_last_position = current_bubble.global_position  # Update last position

		# Move to the bubble center if inside
		global_position = current_bubble.global_position

		# WASD movement inside the bubble
		var direction = Vector2(
			Input.get_axis(\"move_left\", \"move_right\"),
			Input.get_axis(\"move_up\", \"move_down\")
		)

		# Apply movement relative to bubble
		velocity = direction * SPEED + bubble_velocity

		# Press Space to exit the bubble
		if Input.is_action_just_pressed(\"jump\"):
			exit_bubble()
	else:
		# Apply gravity outside the bubble
		if not is_on_floor():
			velocity.y += gravity * delta

		# Handle jump
		if Input.is_action_just_pressed(\"jump\") and is_on_floor():
			velocity.y = JUMP_VELOCITY

		# Handle left/right movement
		var direction = Input.get_axis(\"move_left\", \"move_right\")
		if direction:
			velocity.x = direction * SPEED
		else:
			velocity.x = move_toward(velocity.x, 0, SPEED)

	move_and_slide()

func play_animation():
	# Only play move animation if the velocity is non-zero and the player is NOT inside any bubble
	if velocity.length() > 0.1 and not inside_bubble:
		if $AnimationPlayer.current_animation != \"player_move\":
			if is_on_floor():
				$CPUParticles2D.emitting = true
			$AnimationPlayer.play(\"player_move\")
	else:  
		if $AnimationPlayer.current_animation != \"player_idle\":
			$CPUParticles2D.emitting = false
			$AnimationPlayer.play(\"player_idle\")

func _process(delta):
	flip_player()
	play_animation()

func _physics_process(delta):
	move_player(delta)

# When entering a bubble
func _on_area_2d_area_entered(area: Area2D):
	
	if area.is_in_group('trap_one_hit'):
		game_manager.restart_lvl()
	
	if area.is_in_group('bubble'):
		inside_bubble = true
		gravity = 0  # Disable gravity

		# Add bubble to the dictionary
		bubbles_inside[area] = true  
		bubble_last_position = area.global_position  # Initialize position tracking
		
		# Move player to the center of the bubble
		global_position = area.global_position
		velocity = Vector2.ZERO  # Reset velocity

# Exiting the bubble when pressing Space
func exit_bubble():
	if inside_bubble and bubbles_inside.size() > 0:
		# Remove the current bubble from the list
		var current_bubble = bubbles_inside.keys()[0]
		bubbles_inside.erase(current_bubble)

		# If no bubbles are left, restore gravity
		if bubbles_inside.size() == 0:
			inside_bubble = false
			gravity = org_gravity  # Restore gravity
			velocity.y = JUMP_VELOCITY  # Apply jump force
			bubble_velocity = Vector2.ZERO  # Reset bubble velocity

# When leaving a bubble naturally
func _on_area_2d_area_exited(area: Area2D):
	if area.is_in_group('bubble'):
		# Remove the bubble from the dictionary
		bubbles_inside.erase(area)

		# If no bubbles remain, restore gravity
		if bubbles_inside.size() == 0:
			inside_bubble = false
			gravity = org_gravity  # Restore gravity
			bubble_velocity = Vector2.ZERO  # Reset bubble velocity
"

[sub_resource type="Curve" id="Curve_r1otw"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.50188, 0.103947), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_uehwk"]
radius = 1.73724
height = 4.52997

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_w3n0b"]
radius = 1.20631
height = 4.94291

[sub_resource type="Curve" id="Curve_7gvgt"]
_data = [Vector2(0, 0.956643), 0.0, 0.0, 0, 0, Vector2(0.953007, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="Animation" id="Animation_yk412"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("3_jae7b")]
}

[sub_resource type="Animation" id="Animation_vjj22"]
resource_name = "player_idle"
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(),
"transitions": PackedFloat32Array(),
"update": 1,
"values": []
}

[sub_resource type="Animation" id="Animation_b5btq"]
resource_name = "player_move"
length = 0.134
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0666667, 0.133333),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [ExtResource("3_jae7b"), ExtResource("4_ba7lx"), ExtResource("3_jae7b")]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_nfiy8"]
_data = {
"RESET": SubResource("Animation_yk412"),
"player_idle": SubResource("Animation_vjj22"),
"player_move": SubResource("Animation_b5btq")
}

[node name="Player" type="CharacterBody2D" groups=["player"]]
script = SubResource("GDScript_beeb3")

[node name="Gun" type="Sprite2D" parent="." node_paths=PackedStringArray("player", "gun_tip", "particle_fx", "cooldown_timer")]
texture_filter = 1
texture = ExtResource("1_eo11n")
offset = Vector2(4, 0)
script = ExtResource("2_skjeg")
player = NodePath("..")
gun_tip = NodePath("Tip")
bubble_scene = ExtResource("3_i7jmg")
particle_fx = NodePath("CPUParticles2D")
cooldown_timer = NodePath("Cooldown")

[node name="CPUParticles2D" type="CPUParticles2D" parent="Gun"]
position = Vector2(6, 0)
emitting = false
amount = 5
lifetime = 0.2
one_shot = true
texture = ExtResource("4_n7ypu")
emission_shape = 1
emission_sphere_radius = 2.4
gravity = Vector2(0, 0)
scale_amount_curve = SubResource("Curve_r1otw")

[node name="Tip" type="Node2D" parent="Gun"]
position = Vector2(9, 0)

[node name="Cooldown" type="Timer" parent="Gun"]

[node name="Sprite2D" type="Sprite2D" parent="."]
texture_filter = 1
texture = ExtResource("3_jae7b")

[node name="Area2D_Player" type="Area2D" parent="." groups=["player"]]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D_Player"]
shape = SubResource("CapsuleShape2D_uehwk")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CapsuleShape2D_w3n0b")

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(4, 4)
position_smoothing_enabled = true

[node name="CPUParticles2D" type="CPUParticles2D" parent="Camera2D"]
lifetime = 2.0
randomness = 1.0
emission_shape = 3
emission_rect_extents = Vector2(80, 45)
gravity = Vector2(0, 100)
color = Color(0.0134, 0.01967, 0.02, 0.105882)

[node name="CPUParticles2D" type="CPUParticles2D" parent="."]
position = Vector2(1, 3)
amount = 2
lifetime = 0.2
randomness = 1.0
emission_shape = 1
emission_sphere_radius = 3.0
gravity = Vector2(0, 0)
scale_amount_curve = SubResource("Curve_7gvgt")
color = Color(0.068902, 0.0706288, 0.0702037, 1)

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_nfiy8")
}

[connection signal="area_entered" from="Area2D_Player" to="." method="_on_area_2d_area_entered"]
[connection signal="area_exited" from="Area2D_Player" to="." method="_on_area_2d_area_exited"]
[connection signal="body_entered" from="Area2D_Player" to="." method="_on_area_2d_body_entered"]
